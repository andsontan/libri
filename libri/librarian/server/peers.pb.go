// Code generated by protoc-gen-go.
// source: peers.proto
// DO NOT EDIT!

/*
Package server is a generated protocol buffer package.

It is generated from these files:
	peers.proto

It has these top-level messages:
	Peer
	Peers
*/
package server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Peer is the basic information associated with each peer in the network.
type Peer struct {
	// The 32-byte ID
	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// The string-encoded ID.
	PeerIdStr string `protobuf:"bytes,2,opt,name=peer_id_str,json=peerIdStr" json:"peer_id_str,omitempty"`
	// The public IP address
	AddressIp string `protobuf:"bytes,3,opt,name=address_ip,json=addressIp" json:"address_ip,omitempty"`
	// The public address TCP port
	AddressPort uint32 `protobuf:"varint,4,opt,name=address_port,json=addressPort" json:"address_port,omitempty"`
	// The epoch time (seconds since 1970) of the latest response from the node.
	LatestResponse uint64 `protobuf:"varint,5,opt,name=latest_response,json=latestResponse" json:"latest_response,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Peer) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *Peer) GetPeerIdStr() string {
	if m != nil {
		return m.PeerIdStr
	}
	return ""
}

func (m *Peer) GetAddressIp() string {
	if m != nil {
		return m.AddressIp
	}
	return ""
}

func (m *Peer) GetAddressPort() uint32 {
	if m != nil {
		return m.AddressPort
	}
	return 0
}

func (m *Peer) GetLatestResponse() uint64 {
	if m != nil {
		return m.LatestResponse
	}
	return 0
}

// Peers is a collection of Peer objects.
type Peers struct {
	// A map of string-encoded node IDs to Node objects.
	Peers map[string]*Peer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Peers) Reset()                    { *m = Peers{} }
func (m *Peers) String() string            { return proto.CompactTextString(m) }
func (*Peers) ProtoMessage()               {}
func (*Peers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Peers) GetPeers() map[string]*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func init() {
	proto.RegisterType((*Peer)(nil), "server.Peer")
	proto.RegisterType((*Peers)(nil), "server.Peers")
}

func init() { proto.RegisterFile("peers.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0x4d, 0x4b, 0x04, 0x21,
	0x18, 0x80, 0x71, 0xe7, 0x23, 0xe6, 0x9d, 0xe9, 0x03, 0x2f, 0x49, 0x50, 0xd8, 0x5c, 0xf2, 0x34,
	0x87, 0xed, 0x12, 0xdd, 0x0b, 0xf6, 0xb6, 0xd8, 0x0f, 0x90, 0x09, 0xdf, 0xc3, 0xd0, 0xb2, 0xca,
	0xab, 0x2d, 0xcc, 0xa9, 0xff, 0xd3, 0xaf, 0x8c, 0xd1, 0x89, 0xba, 0x88, 0x3e, 0x8f, 0x8a, 0x8f,
	0xd0, 0x7a, 0x44, 0x0a, 0x83, 0x27, 0x17, 0x1d, 0xaf, 0x03, 0xd2, 0x09, 0xa9, 0xff, 0x66, 0x50,
	0xee, 0x11, 0x89, 0x5f, 0xc3, 0xd9, 0xe2, 0xcd, 0x64, 0x05, 0x93, 0x4c, 0x75, 0xba, 0x5e, 0x96,
	0x3b, 0xcb, 0xef, 0xf2, 0x41, 0x33, 0x59, 0x13, 0x22, 0x89, 0x8d, 0x64, 0xaa, 0xd1, 0x4d, 0x96,
	0x6f, 0x91, 0xf8, 0x2d, 0xc0, 0x68, 0x2d, 0x61, 0x08, 0x66, 0xf2, 0xa2, 0xc8, 0x7a, 0x25, 0x3b,
	0xcf, 0xef, 0xa1, 0xfb, 0xd5, 0xde, 0x51, 0x14, 0xa5, 0x64, 0xea, 0x5c, 0xb7, 0x2b, 0xdb, 0x3b,
	0x8a, 0xfc, 0x01, 0x2e, 0x0f, 0x63, 0xc4, 0x10, 0x0d, 0x61, 0xf0, 0xee, 0x18, 0x50, 0x54, 0x92,
	0xa9, 0x52, 0x5f, 0x64, 0xac, 0x57, 0xda, 0x7f, 0x41, 0xb5, 0xbc, 0x35, 0xf0, 0x01, 0xaa, 0x14,
	0x23, 0x98, 0x2c, 0x54, 0xbb, 0x15, 0x43, 0xae, 0x19, 0x92, 0xcd, 0xe3, 0xcb, 0x31, 0xd2, 0xac,
	0xf3, 0xb6, 0x9b, 0x57, 0x80, 0x3f, 0xc8, 0xaf, 0xa0, 0xf8, 0xc0, 0x39, 0x65, 0x36, 0x7a, 0x99,
	0xf2, 0x1e, 0xaa, 0xd3, 0x78, 0xf8, 0xc4, 0x54, 0xd7, 0x6e, 0xbb, 0xff, 0xf7, 0xe9, 0xac, 0x9e,
	0x37, 0x4f, 0xec, 0xbd, 0x4e, 0x9f, 0xf7, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0xab, 0x8b, 0x30,
	0x81, 0x4b, 0x01, 0x00, 0x00,
}
